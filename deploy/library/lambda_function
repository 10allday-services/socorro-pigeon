#!/usr/bin/env python

import json
from hashlib import sha256
from base64 import b64encode

try:
    import boto3
except ImportError:
    print "failed=True msg='boto3 required for this module'"
    exit(1)


def main():
    module = AnsibleModule(
        argument_spec=dict(
            function_name=dict(required=True),
            state=dict(default='present'),
            region=dict(default='us-east-1'),
            zip_file=dict(default=''),
            role=dict(default=''),
            runtime=dict(default=''),
            handler=dict(default=''),
            description=dict(default=''),
            timeout=dict(default=3, type='int'),
            memory_size=dict(default=128, type='int'),
        )
    )

    state = module.params['state']
    region = module.params['region']
    function_name = module.params['function_name']
    zip_file = module.params['zip_file']
    config = dict(
        Runtime=module.params['runtime'],
        Role=module.params['role'],
        Handler=module.params['handler'],
        Description=module.params['description'],
        Timeout=module.params['timeout'],
        MemorySize=module.params['memory_size'],
    )

    client = boto3.client('lambda', region)

    try:
        func = client.get_function(FunctionName=function_name)
        exists = True
    except Exception:
        exists = False

    if state == 'present':
        if config['Handler'] == '':
            module.fail_json(msg='Missing parameter: handler')
        if config['Runtime'] == '':
            module.fail_json(msg='Missing parameter: runtime')
        if zip_file == '':
            module.fail_json(msg='Missing parameter: zip_file')
        if exists:
            with open(zip_file) as f:
                content = f.read()
            changes = {key:value for key, value in config.iteritems() if func['Configuration'][key] != value}
            if changes:
                if 'Runtime' in changes:
                    module.fail_json(msg='Cannot update function, runtime is immutable')
                client.update_function_configuration(FunctionName=function_name, **changes)
            if func['Configuration']['CodeSha256'] != b64encode(sha256(content).digest()):
                changes.update(ZipFile=zip_file)
                client.update_function_code(FunctionName=function_name, ZipFile=bytearray(content))
            module.exit_json(changed=bool(changes), changes=changes)
        else:
            with open(zip_file) as f:
                content = f.read()
            config['Code'] = {'ZipFile': bytearray(content)}
            client.create_function(FunctionName=function_name, **config)
            module.exit_json(changed=True)
    elif state == 'absent':
        if exists:
            client.delete_function(FunctionName=function_name)
            module.exit_json(changed=True)
        else:
            module.exit_json(changed=False)
    else:
        module.fail_json(msg='Invalid state: ' + state)


# import module snippets
from ansible.module_utils.basic import *

main()
