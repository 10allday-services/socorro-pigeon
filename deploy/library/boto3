#!/usr/bin/env python

import json

try:
    import boto3
except ImportError:
    print "failed=True msg='boto3 required for this module'"
    exit(1)

try:
    import jmespath
except ImportError:
    print "failed=True msg='jmespath required for this module'"
    exit(1)


def json_encode(paths, arguments):
    if type(paths) is list:
        for path in paths:
            indexes = path.split('.')
            final = indexes.pop()
            override = arguments
            for index in indexes:
                if type(override) is list:
                    override = override[int(index)]
                elif type(override) is dict:
                    override = override[index]
                else:
                    raise KeyError('invalid arguments path: %s: %s' % (path, index))
            if type(override) is list:
                value = override[int(final)]
                override[int(final)] = json.dumps(value)
            elif type(override) is dict:
                value = override[final]
                override[final] = json.dumps(value)
            else:
                raise KeyError('invalid arguments path: %s: %s' % (path, final))
        return arguments
    elif paths is 'all':
        return json.dumps(arguments)
    else:
        raise ValueError('invalid parameter value for encode or match_encode: %s' % paths)


def run(command, subcommand, region='us-east-1', arguments={}, encode=None, query=None, match=None, match_encode=None, **kwargs):
    try:
        client = boto3.client(command, region)
        method = getattr(client, subcommand)
        if encode is not None:
            arguments = json_encode(encode, arguments)
        response = method(**arguments)
        if query is not None:
            if 'fromjson' in query:
                # pretend there is a function called fromjson that must be piped to/from
                # because jmespath doesn't have one, but it should
                for path in query.split('|'):
                    if path == 'fromjson':
                        response = json.loads(response)
                    else:
                        response = jmespath.search(path, response)
            else:
                response = jmespath.search(query, response)
        if match_encode is not None:
            match = json_encode(match_encode, match)
        if match is not None:
            return response == match, response
        else:
            return response is not None, response
    except Exception as e:
        return False, e.message


def main():
    module = AnsibleModule(
        argument_spec=dict(
            command=dict(required=True),
            subcommand=dict(required=True),
            region=dict(default='us-east-1'),
            arguments=dict(default={},type='dict'),
            encode=dict(), # convert these paths to json
            query=dict(), # if query is not None: response = jmespath.search(query, response)
            match=dict(), # if match is not None: success = response == match
            match_encode=dict(), # convert these paths to json
            onlyif=dict(type='dict'), # return changed=False if run(**onlyif) fails
            unless=dict(type='dict'), # return changed=False if run(**unless) succeeds
            is_lookup=dict(type='bool',default=False), # flags if aws changes are made
        )
    )

    params = module.params
    onlyif = params['onlyif']
    unless = params['unless']

    if onlyif is not None:
        if 'command' not in onlyif:
            onlyif['command'] = params['command']
        if 'region' not in onlyif:
            onlyif['region'] = params['region']

        if 'subcommand' not in onlyif:
            module.fail_json(msg='missing required argument: subcommand')

        success, response = run(**onlyif)
        if not success:
            module.exit_json(output=response)

    if unless is not None:
        if 'command' not in unless:
            unless['command'] = params['command']
        if 'region' not in unless:
            unless['region'] = params['region']

        if 'subcommand' not in unless:
            module.fail_json(msg='missing required argument: subcommand')

        success, response = run(**unless)
        if success:
            module.exit_json(output=response)

    success, response = run(**params)
    if success:
        module.exit_json(changed=(False if params['is_lookup'] else True), output=response)
    else:
        module.fail_json(msg=str(response))


# import module snippets
from ansible.module_utils.basic import *

main()
